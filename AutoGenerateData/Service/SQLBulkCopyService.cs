using Microsoft.Data.SqlClient;
using System.Data;
using System.Reflection;

namespace AutoGenerateData
{
    public class SQLBulkCopyService : ISQLBulkCopyService
    {
        private readonly IConfiguration Configuration;
        private readonly string _conn;

        private int _insertCount = 100;
        private delegate object SetValue();
        private Dictionary<Type, SetValue> _actionDictionary = new();

        public SQLBulkCopyService(IConfiguration configuration)
        {
            Configuration = configuration;
            _conn = Configuration["ConnectionString"] ?? @"Data Source=./;Initial Catalog = DBPractise;Integrated Security = True;TrustServerCertificate=True;";
            SetActionDictionary();
        }


        /// <summary>
        /// Generate Interger Type Data
        /// </summary>
        /// <returns></returns>
        private object AssignIntValue()
        {
            return new Random().Next(100);
        }

        /// <summary>
        /// Generate Guid Type Data
        /// </summary>
        /// <returns></returns>
        private object AssignGuidValue()
        {
            return Guid.NewGuid();
        }

        /// <summary>
        /// Generate String Type Data
        /// </summary>
        /// <returns></returns>
        private object AssignStringValue()
        {
            string[] strArr = new string[] { "Joseph", "Michael", "John", "Marry" };
            return strArr[new Random().Next(strArr.Length)];
        }

        //Allow the process to autogenerate three types of data(string, integer and guid)
        private void SetActionDictionary()
        {
            if (!_actionDictionary.Keys.Any(i => i == typeof(int)))
                _actionDictionary.Add(typeof(int), AssignIntValue);
            if (!_actionDictionary.Keys.Any(i => i == typeof(string)))
                _actionDictionary.Add(typeof(string), AssignStringValue);
            if (!_actionDictionary.Keys.Any(i => i == typeof(Guid)))
                _actionDictionary.Add(typeof(Guid), AssignGuidValue);
        }

        /// <summary>
        /// Invoke the procedure to auto generate data 
        /// </summary>
        /// <param name="objectType"></param>
        /// <returns></returns>
        public DataTable TransferTypeToDataTable(Type objectType)
        {
            var dt = new DataTable();
            IEnumerable<PropertyInfo> props = objectType.GetProperties();

            foreach (var item in props)
            {
                dt.Columns.Add(item.Name, item.PropertyType);
            }

            for (int i = 0; i < _insertCount; i++)
            {
                var row = dt.NewRow();
                foreach (var item in props)
                {
                    Type type = item.PropertyType;
                    row[item.Name] = _actionDictionary[type].Invoke();
                }
                dt.Rows.Add(row);
            }
            return dt;
        }

        public void InsertData(DataTable dt, string tableName, Type type)
        {
            IEnumerable<PropertyInfo> props = type.GetProperties();
            using (var sql = new SqlConnection(_conn))
            {
                sql.Open();
                using (var sqlBulkCopy = new SqlBulkCopy(sql))
                {
                    sqlBulkCopy.DestinationTableName = tableName;
                    foreach (var item in props)
                    {
                        sqlBulkCopy.ColumnMappings.Add(item.Name, item.Name);
                    }
                    sqlBulkCopy.WriteToServer(dt);
                }
            }
        }
    }
 }
